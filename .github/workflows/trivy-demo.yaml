name: Trivy Demo

on:
  workflow_dispatch:
  
permissions:
  id-token: write   # Required for OIDC authentication
  contents: read

jobs:
  lint-backend:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-backend-lint
      cancel-in-progress: true

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        run: cd starter/backend && pipenv install --dev

      - name: Lint code
        run: cd starter/backend && pipenv run lint

  test-backend:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-backend-test
      cancel-in-progress: true

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        run: cd starter/backend && pipenv install

      - name: Run tests
        run: cd starter/backend && pipenv run test

  backend-deploy:
    needs: [ lint-backend, test-backend ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ARN_Role }}
          aws-region: us-east-1  # Replace with your AWS region

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: 'v3.9.4'  # specify the Helm version you want to use

      - name: Build, tag image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_BE_REPO_NAME }}
          IMAGE_TAG: toantd19
        run: |
          cd starter/backend
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" -t "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }}" .
          ###docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Run Trivy vulnerability scanner (Table output)
        uses: aquasecurity/trivy-action@0.20.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_BE_REPO_NAME }}
        with:
          image-ref: '${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_BE_REPO_NAME }}
        with:
          image-ref: '${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}'
          format: 'json'
          output: 'trivy-report.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Check for critical and high vulnerabilities
        id: check-vulnerabilities
        run: |
          # Parse JSON and extract vulnerabilities with CRITICAL or HIGH severity
          CRITICAL_VULNS=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID + ": " + .PkgName + " " + .InstalledVersion + " " + .FixedVersion] | join("\n")' trivy-report.json || echo "No critical vulnerabilities found")
          HIGH_VULNS=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID + ": " + .PkgName + " " + .InstalledVersion + " " + .FixedVersion] | join("\n")' trivy-report.json || echo "No high vulnerabilities found")
          echo "CRITICAL_VULNS=$(echo "$CRITICAL_VULNS" | jq -Rsa .)" >> $GITHUB_ENV
          echo "HIGH_VULNS=$(echo "$HIGH_VULNS" | jq -Rsa .)" >> $GITHUB_ENV

      - name: Send alert to Microsoft Teams if vulnerabilities found
        if: env.CRITICAL_VULNS != '[]' || env.HIGH_VULNS != '[]'
        env:
          WEBHOOK_URL: ${{ secrets.Teams_Hook }}
          CRITICAL_VULNS: ${{ env.CRITICAL_VULNS }}
          HIGH_VULNS: ${{ env.HIGH_VULNS }}
        run: |
          # Format the message payload with properly escaped content
          curl -H 'Content-Type: application/json' -d '{
            "@type": "MessageCard",
            "@context": "https://schema.org/extensions",
            "summary": "Trivy Scan Report",
            "themeColor": "FF0000",
            "sections": [{
              "activityTitle": "Trivy Vulnerability Scan",
              "activitySubtitle": "Critical and High severity vulnerabilities found",
              "facts": [{
                "name": "Critical vulnerabilities",
                "value": "'"$(echo -e "${CRITICAL_VULNS}" | sed 's/"/\\"/g')"'""
              },{
                "name": "High vulnerabilities",
                "value": "'"$(echo -e "${HIGH_VULNS}" | sed 's/"/\\"/g')"'""
              }],
              "markdown": true
            }]
          }' $WEBHOOK_URL

      - name: Fail build if critical or high vulnerabilities found
        if: env.CRITICAL_COUNT != '0' || env.HIGH_COUNT != '0'
        run: exit 1		

      - name: push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_BE_REPO_NAME }}
          IMAGE_TAG: toantd19
        run: |
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
