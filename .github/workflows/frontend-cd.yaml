name: Frontend CD

on:
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  lint-frontend:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-frontend-lint
      cancel-in-progress: true

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.14.2

      - name: Cache Node.js modules
        id: cache-node
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}


      - name: Install dependencies
        run: cd starter/frontend && npm ci

      - name: Lint code
        run: cd starter/frontend && npm run lint

  test-frontend:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-frontend-test
      cancel-in-progress: true

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.14.2

      - name: Cache Node.js modules
        id: cache-node
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: cd starter/frontend && npm ci

      - name: Run tests
        run: cd starter/frontend && npm test

  frontend-deploy:
    needs: [ lint-frontend, test-frontend ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: 'v3.9.4'  # specify the Helm version you want to use

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_FE_REPO_NAME }}
          IMAGE_TAG: toantd19
          BACKEND_ENDPOINT: ${{ secrets.BACKEND_ENDPOINT }}
        run: |
          cd starter/frontend
          docker build --build-arg REACT_APP_MOVIE_API_URL=$BACKEND_ENDPOINT -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Verify kubectl configuration
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER }} --region us-east-1 && kubectl get nodes

      - name: Update Deployment Image Tag and Deploy
        uses: WyriHaximus/github-action-helm3@v3
        working-directory: starter/helm
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_FE_REPO_NAME }}
          IMAGE_TAG: toantd19
        exec: |
          #helm repo add my-repo https://github.com/toandinhtruong/cd12354-Movie-Picture-Pipeline
          #helm repo update
          helm upgrade --install helm . --force \
            --set image.frontend.repository=$ECR_REGISTRY/$ECR_REPOSITORY \
            --set image.frontend.tag=$IMAGE_TAG \
            --namespace default
